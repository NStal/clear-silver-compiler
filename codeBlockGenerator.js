// Generated by CoffeeScript 1.6.2
(function() {
  var BodyClause, Clause, Clauses, CodeBlock, EachClause, EchoClause, IfClause, SetClause, VarClause,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CodeBlock = (function() {
    function CodeBlock() {
      this.variableDeclares = [];
      this.variableInit = [];
      this.code;
    }

    CodeBlock.prototype.createVariable = function(type, name) {};

    return CodeBlock;

  })();

  Clause = (function() {
    function Clause() {}

    return Clause;

  })();

  Clause.fromASTNode = function(node) {
    var constructor;

    constructor = Clauses[node.type];
    if (!constructor) {
      throw new Error("unsupported clause type", node.type);
    }
    return new constructor(node);
  };

  BodyClause = (function(_super) {
    __extends(BodyClause, _super);

    function BodyClause(node) {
      this.node = node;
    }

    BodyClause.prototype.generateCode = function(globalScope) {
      var clause, codes, item, _i, _len, _ref;

      codes = [];
      _ref = this.node.body;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        clause = Clause.fromASTNode(item);
        codes.push(clause.generateCode(globalScope));
      }
      return codes.join("\n");
    };

    return BodyClause;

  })(Clause);

  EachClause = (function(_super) {
    __extends(EachClause, _super);

    function EachClause() {}

    return EachClause;

  })(Clause);

  SetClause = (function(_super) {
    __extends(SetClause, _super);

    function SetClause() {
      x;
    }

    return SetClause;

  })(Clause);

  VarClause = (function(_super) {
    __extends(VarClause, _super);

    function VarClause() {}

    return VarClause;

  })(Clause);

  IfClause = (function(_super) {
    __extends(IfClause, _super);

    function IfClause() {}

    return IfClause;

  })(Clause);

  EchoClause = (function(_super) {
    __extends(EchoClause, _super);

    function EchoClause(node) {
      this.node = node;
      this.templates = "CSEcho(\"{content}\");";
    }

    EchoClause.prototype.generateCode = function(globalScope) {
      return this.templates.replace("{content}", this.node.string);
    };

    return EchoClause;

  })(Clause);

  Clauses = {
    "if": IfClause,
    "body": "body",
    BodyClause: BodyClause,
    "set": "set",
    SetClause: SetClause,
    "var": "var",
    VarClause: VarClause,
    "each": "each",
    EachClause: EachClause,
    "echo": "echo",
    EchoClause: EchoClause
  };

  exports.Clause = Clause;

  exports.Clauses = Clauses;

}).call(this);
