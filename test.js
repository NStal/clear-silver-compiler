// Generated by CoffeeScript 1.6.2
(function() {
  var ast, compiler, createIndentSpace, fs, printAST, testFile, testFiles, testParseToken, token;

  fs = require("fs");

  ast = require("./ast.coffee");

  token = require("./token.coffee");

  compiler = require("./compiler");

  testFiles = ["test/echo.cs"];

  createIndentSpace = function(indent) {
    var _;

    return ((function() {
      var _i, _results;

      _results = [];
      for (_ = _i = 0; 0 <= indent ? _i <= indent : _i >= indent; _ = 0 <= indent ? ++_i : --_i) {
        _results.push("  ");
      }
      return _results;
    })()).join("");
  };

  printAST = function(ast, indent) {
    var item, _i, _len, _ref;

    if (ast.type !== "body") {
      console.log(createIndentSpace(indent), "|", "<" + ast.type + ">", ast.string || "");
    }
    _ref = ast.body;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      if (item.type === "body") {
        printAST(item, indent + 1);
      } else {
        printAST(item, indent);
      }
    }
    if (ast.elseNode) {
      return printAST(ast.elseNode, indent);
    }
  };

  testFile = function() {
    var AST, blocks, clauses, file, index, item, _i, _j, _len, _len1, _results;

    _results = [];
    for (_i = 0, _len = testFiles.length; _i < _len; _i++) {
      file = testFiles[_i];
      blocks = ast.parseBlocks(fs.readFileSync(file).toString());
      clauses = ast.parseClauses(blocks);
      for (index = _j = 0, _len1 = clauses.length; _j < _len1; index = ++_j) {
        item = clauses[index];
        false;
      }
      AST = ast.buildAST(clauses, 0);
      printAST(AST, 0);
      _results.push(console.log("code", compiler.generateCode(AST)));
    }
    return _results;
  };

  testParseToken = function() {
    return console.log(token.parseTokens("( var1+var2 )<var5.x.y.0*3"));
  };

  testFile();

}).call(this);
